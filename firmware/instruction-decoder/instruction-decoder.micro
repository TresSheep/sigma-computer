; "write" sends a write pulse on the control bus
; "read" sends a read pulse on the control bus

; Internal commands
; "call" calls a function
; "ret" returns from the function
; "je" jumps if the "read" 1-bit register is set
; "exec" pulses the clock

; each address is located in opcode (x) the (y) contains information about the instruction being executed

; A demux is connected to the inputs and a mux is connected to the outputs. So a register can be both read or write

.data

    ; register mapping on the bus. Total of 16 wires
    READ: 0x01 ; read is wire 0
    WRITE: 0x02 ; write is wire 1.
    MUX1: 0x04 ; mux 1 is wire 2
    REGISTER_A: 0x04 ; wire 2 is active and 000 through lines 3, 4 and 5
    REGISTER_B: 0x0C
    REGISTER_C: 0x14
    REGISTER_D: 0x1C

    EIGHT_BIT_MODE_L: 0x38 ; wire 6. This chooses eight bit mode. The lower half.
    EIGHT_BIT_MODE_H: 0x78 ; wire 7. This chooses eight bit mode. The higher half.

.code

; internal functions

pulse_clk:
    ; pulse the clock
    ret

; main

main:
    ; FETCH

    ; main is located at address 0x00 and is at address space x bit 1
    ; fetch the opcode and store it in the instruction register along with its address (24-bits)
    ;write MEMORY_REGISTER
    ;read INSTRUCTION_REGISTER
    ;call pulse_clk
    ;write INSTRUCTION_REGISTER_OPCODE
    ;read INSTRUCTION_DECODER
    ;call pulse_clk

    ; get address space y (higher 8-bits + 1) from opcode address x (lower 8-bits + 1)
    
; opcodes

[0x01] ; address is relative +1 bit for main
add_r_r:

; 0x00 is written as end byte